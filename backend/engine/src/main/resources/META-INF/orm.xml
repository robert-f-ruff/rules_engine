<?xml version="1.0" encoding="UTF-8"?>

<entity-mappings xmlns="https://jakarta.ee/xml/ns/persistence/orm"
        xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
        xsi:schemaLocation="https://jakarta.ee/xml/ns/persistence/orm
          https://jakarta.ee/xml/ns/persistence/orm/orm_3_1.xsd"
        version="3.1">
    <named-native-query name="RuleCriteria" result-set-mapping="RuleCriteriaMapping">
        <query>
            SELECT rule.id AS rule_id, rule.name AS rule_name,
                criterion.name AS criterion, criterion.logic
            FROM (rules_rule AS rule LEFT JOIN rules_rule_criteria
                    ON rule.id = rules_rule_criteria.rule_id)
                LEFT JOIN rules_criterion AS criterion
                    ON rules_rule_criteria.criterion_id = criterion.name;
        </query>
    </named-native-query>
    <sql-result-set-mapping name="RuleCriteriaMapping">
        <constructor-result target-class="io.github.robert_f_ruff.rules_engine.loader.RuleCriterionDataTransfer">
            <column name="rule_id" class="java.lang.Long"/>
            <column name="rule_name"/>
            <column name="criterion"/>
            <column name="logic"/>
        </constructor-result>
    </sql-result-set-mapping>
    <named-native-query name="RuleActions" result-set-mapping="RuleActionsMapping">
        <query>
			SELECT actionValues.rule_id, actionValues.action_number,
				actionValues.action_id, actionDefinition.function,
				actionDefinition.parameter_number, actionValues.parameter_id,
				actionValues.parameter_value
			FROM (
				SELECT ruleAction.rule_id, ruleAction.action_number,
					ruleAction.action_id, ruleParameter.parameter_id,
					ruleParameter.parameter_value
				FROM rules_ruleactions AS ruleAction
					LEFT JOIN rules_ruleactionparameters AS ruleParameter
						ON ruleAction.id = ruleParameter.rule_action_id
				) AS actionValues
				LEFT JOIN (
					SELECT action.name AS action_id, action.function,
						parameter.parameter_id, parameter.parameter_number
					FROM rules_action AS action
						LEFT JOIN rules_actionparameters AS parameter
							ON action.name = parameter.action_id
				) AS actionDefinition
				ON (actionValues.action_id = actionDefinition.action_id
					AND actionValues.parameter_id = actionDefinition.parameter_id)
			ORDER BY actionValues.rule_id, actionValues.action_number, actionDefinition.parameter_number;
        </query>
    </named-native-query>
    <sql-result-set-mapping name="RuleActionsMapping">
        <constructor-result target-class="io.github.robert_f_ruff.rules_engine.loader.RuleActionDataTransfer">
				<column name = "rule_id" class = "java.lang.Long"/>
				<column name = "action_number" class = "java.lang.Integer"/>
				<column name = "action_id"/>
				<column name = "function"/>
				<column name = "parameter_number" class = "java.lang.Integer"/>
				<column name = "parameter_id"/>
				<column name = "parameter_value"/>
        </constructor-result>
    </sql-result-set-mapping>
</entity-mappings>
